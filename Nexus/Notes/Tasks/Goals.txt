
/*****************************
****** Project Timeline ******
*****************************/

	Interactions with NPCs (UI)
		- Cycle through text.
	
	Text Game Objects
		- Show text in levels, such as forced comments or tips.
	
	NEXT MAJOR: Add Game Mode Functionality; Assist, Challenge. Has "mode designer", which has a counter for which mode you're in.
		- Tiles have a "mode" param that can be set. Makes item appear when that mode is active.
	
/********************************
****** Core / Prerequisite ******
********************************/

LevelConverter / Mapper:
	Before formatting, save the version number into the JSON.
		- This is important since the update will need to occur at different times. Like when someone actually loads it up.
	Flags Added
		- Allow scripted events, transitions, etc.
		- Can be used for the editor, timed, etc. 

Scripted Events:
	- A separate page / json file is going to be required for adding this. Won't be possible in editor.
	- So if someone wants to do special scripting, that's fine; just use the json editor / api / whatever.
	- Just need the structure in place for now.

Flags:
	- Don't render on the screen.
	- Have an "activation type" parameter: after an x position is passed, area position (rect), position + proximity (circle), timer at, etc.
	- Can have children / daisy chained flags that activate afterward or in addition to. Can also include time delays, etc.
	- Flag can cause a transition, such as: music change, sound effects, camera behavior, boss sequences, etc.
	- Objects can spawn based on the flag? Ticks? Positions? Special bullet objects, like bowser flames.
	- Saved into the room data.
	Options:
		Triggers (all triggers must match to trigger)
			- boundsToTrigger [optional]; sets Bounds that will trigger, can also have offset.
			- proximityToTrigger [optional]; sets proximity and a type of object that can trigger it (or archetype, etc)
			- timerToTrigger [optional]; sets a timed event
			- xPositionToTrigger [optional]; character must pass a certain point
			- frequencyToTrigger [optional]; activates when a frequency elsewhere has activated
		Frequency
			- triggers a frequency with a certain number/letter/word/etc
		Effect
			- sets a global value; which other objects may pay attention to
			- object appears
			- screen effects (shake, etc)
			- sound
			- room change
			- scroll speed change
			- etc.

/******************
****** Level ******
******************/

Text Objects:
	Text displayed cosmetically. (dynamic, to simplify; shouldn't need many times)
		- Color, Size
		- Changing options.
		- Follow options
		- What else?

Important Changes, Refactors, Features:
	GameEffect Class (or Classes)
		- Triggers (the thing causing the frequency or effect; could be any actor, just needs to send it through some system).
		- Events (the result of the effect)
		Frequency Effect Class: causes events or things to happen when a trigger is performed. Digital signals.
		Potion Effect Class: Need its own class and behaviors, since it will trigger game-modifying events.
		
Trailing Items:
	Still needs to be revised for better use.
		- Only follow to the character's last few spots on the ground. (Takes "touching, down" into account).

/**********************
****** UI System ******
**********************/

	Generic-ish Components:
		MenuTiles: Level Icons, etc.
			- With background
		FilterComponent
			- Shows filter options, can switch between them, set them.
			- Gets filter settings from player configs.
		Config (for Icons): buildIconList( button: UIButton, icons: string[] )
			- It uses a poor set, should use Object, if we even want it at all.
			- But doing this is an overhaul of the menus, so, maybe just remove menus.

	Level Menu List:
		Keep everything in its current position.
			- Change the slides themselves.
			- Auto-load in the background based on current filters.
			- Keep auto-loaded content in localstorage for fast retrieval?
		Could instead, at least temporarily, make levels as an actual webpage.
		Automatically place icons with prevelence? Within groups, like "Blocks" etc.

	Pause Menu UI Behavior
		While pause menu is visible, show secondary text around the edge of the screen:
			- Alternatively, this might belong in the "about" section?
			Name of the Level (e.g. "Some Cool Level")
			Level Tags (e.g. "Difficult", "Minor Trolling")
			Author of the Level (e.g. "Author: Joe Shmoe")

/*******************
****** Editor ******
*******************/

Editor:
	Quick Keys:
		If you don't have a cursor active, QE will change items below. Maybe?
		Control Key(s) being held (such as "Shift" or "Control"); might be hard with typical limitations.
	Undo/Redo functionality:
		- Need to track the last events that happened and have an "undo" option.
			- Applies to all the functions, so we need a long revert setup. Can revert up to 50 edits?
		- "LastTrack" option - tracks which track options? or, just have all of them here as objects.
			{ "type": Undo.Edit, "gridX": 1, "gridY": 5, "was": "something/blah", "changedTo": "blah/something" }
		- "UndoTrackTools" - tracks the last tools that were chosen / swapped out; also key binds?
		- "UndoTrackEdits" - tracks the last tiles that were placed / removed
	Button Updates:
		Buttons can be "highlighted" to show which is active.
	Bind Keys Numbers/Letters for "Delete" and other options.
	ScrollerUI:
		Help Bar Appears that guides based on scrolled UI.
		Each TileTool has its own special behavior with LEFT and RIGHT modifications.
			- ColorToggles will change color across everything (save state in that tool)
			- Items maintain color (when applicable).
			- Platforms keep same facing direction.
			- Generators will face the same direction.
			- Ground will keep to the same type.
			- Other things do other things.
	Settings button pulls up a dialog with options that might be less used?
	Tutorial Box
		- When you're in tile mode, it will show you that right-click will clone tiles.
		- Explains that Q/E will modify the type of item.
		- Changes for other tools as well, gives a description, etc.
		- Can click a "help" button in the bar to open or close the tutorial box.
		- Clicking on it closes the tutorial box.

/******************
****** Other ******
******************/

Status Effects:
	Components / Considerations:
		Create status effect components that take effect at given times, when the status effect applies.
		All status effects are in .status
		All status effects get run like .status.{STATUS}.run( this )
		Status effect may also have testing behavior to see if it applies? Or that's part of the collision detection.
	Statuses to Add/Update: Friction, Sticky, Invincible, Slow, Fast, Heavy

Custom Modes:
	Creators will be able to create custom modes that alter their existing level.
	Editor will be able to switch into custom modes of their desired type.
	Example: "Harder" could be a mode, but also "The Floor is Lava" as a special custom mode.
	
Game Mods:
	Standard List of Mods:
		- A list of mods that will affect the gameplay.
		- Allows TONS of repeat content.
		Super Powers
		Invincible
		Checkpoints are replaced with Powerups
		Checkpoints also grant Powerups
		No Checkpoints Allowed
		Athletic (better jump, speed, etc)
		Levitate
		Flight (can hold jump to continue flying)
		Always A Ninja
		Always A Wizard
		No Powerups
		Scattered Goodies
		Scattered Enemies
		All Powers are Randomized
		All Suits are Randomized
		All Hats are Randomized
		Extra Firepower (can cast much more frequently)
		Easier Enemies
		Harder Enemies
		More Enemies
		EyeBalls (add eyeballs that fire at you throughout level)
		RNG Mode
		Bullet Hell, Minor
		Bullet Hell, Major
		Fire Hell (fire projectiles around screen)
		Start With {X, Y, Z} (can include powers, suit, etc)
		Coins are Powers / Suits / etc.
		Special Item {X} (can include items that don't normally exist)
	RNG Mode
		- Adds random things into the level, replaces random objects.
		- Could be part of the assist/challenge mode structure; set it up so that it randomizes things.
		- Another layer, in addition to the assist/challenge, so that you can do both simultaneously.

Physics:
	Need a new flying physics for Slammer, since the current implementation won't work correctly.

Considerations:
	New Ninja Type: Can't grab walls, but can wall kick.
		- When grab walls was deactivated, this worked. Was interesting. Caught my attention.
		- Might be really good for speed runners.
	
Scripted Events:
	NPCs can react to events, such as to continue talking.
	Allow you to create more emmersive levels.
	Might have to integrate this with the "frequency" channels; don't let it get too complicated.
	
	
Small Projects (2+ per day):
	Menu Buttons have Frame / Border UI option for default sizes, and has a stretch option.
	Level Settings: Forced Border Positions (such as for levels where stuff drops / moves through tracks)
	
Enemy Stats:
	.ignoreShellDamage (rather than .damagedByShells, since that would eliminate most tests)
		- This must be added to enemy stats, otherwise its use in "shell.js" will be dead code.
	
Menu Projects:
	Campaign List Menu
		Table Format, show each campaign available.
	Campaign Menu
		Possible "Start Campaign" Modal would show Mode (only appears if you've beaten before?)
		Convert into Table Format, show each level in order
		Load Levels from the campaign.
		Levels are "Locked" with Lock Shadow until previous level is completed
	Level Modal
		Appears for Pause Screen and Finished Screen
		Options: Continue, Restart, Settings, Exit
		Paused Version has "Skip" option included
		UI for Coins, Timer, Best Time, Name, other details

Moderate Projects ( 1 per day ):
	Level Completion. End Level Flag
		- Fanfare Music
		- Dancing Animation
		- Woohoo Sound
		- Level Details Menu Basics (eventually contains: favorite / star options, tagging, coins, time, etc)
		- Transition to next level based on levels stored in playlist.
	Enemies and Items can use Conveyors, Moving Platforms
	Timed Slammer. Allows you to create slammers that will act in sequences rather than look for Character.

Major Projects (2+ days):
	Hit Boxes (hit them from below, which triggers an event)
		- Fireballs and other powers like it should be able to trigger buttons or some sort of game object.
		- Maybe targets that activate things. Can throw darts at them like Rogue Legacy.
	Timer System
		- Time Item that add +10 seconds to your time. (Time Potion: When you collect it, the timer increases.)
		- Timer that tracks how much time you have in the level.
	
